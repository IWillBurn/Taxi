version: "3.1"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181


  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2


  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic trip_inbound --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic trip_outbound --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - init-kafka
      - zookeeper


  database:
    image: postgres
    restart: always
    ports:
      - 5433:5432
    environment:
      POSTGRES_DB: trips
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 10s
      timeout: 5s
      retries: 5


  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - ./data:/data/db


  build_trip:
    image: builder:latest
    build:
      context: "."
      dockerfile: "trip_service/.docker/build.Dockerfile"

  trip_service:
    build:
      context: "."
      dockerfile: "./trip_service/.docker/trip_service.Dockerfile"
    restart: unless-stopped
    depends_on:
      build_trip:
        condition: service_completed_successfully
      init-kafka:
        condition: service_completed_successfully
      database:
        condition: service_healthy
    volumes:
      - './trip_service/migrations/:/migrations'

  build_client:
    image: build:develop
    build:
      context: "./client_service"
      dockerfile: "./.docker/build.Dockerfile"

  client:
    build:
      context: "./client_service"
      dockerfile: "./.docker/app.Dockerfile"
    restart: unless-stopped
    depends_on:
      build_client:
        condition: service_completed_successfully
      mongodb:
        condition: service_started
    volumes:
      - './client_service/.config/app.docker.yaml:/app/config.yaml'
    ports:
      - "8080:8080"


  build_offer:
    image: build:develop
    build:
      context: "./offering_service"
      dockerfile: "./.docker/build.Dockerfile"
    depends_on:
      client:
        condition: service_started

  offering:
    build:
      context: "./offering_service"
      dockerfile: "./.docker/app.Dockerfile"
    restart: unless-stopped
    depends_on:
      build_offer:
        condition: service_completed_successfully
    volumes:
      - './offering_service/.config/app.docker.yaml:/app/config.yaml'
    ports:
      - "9090:9090"